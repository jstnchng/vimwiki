== DNS, Route53, SSL, google.com ==
=== DNS ===
* Domain Name System
* Turns domain names into IP address
* Use IP address to route your request to the site
* A record maps a name to one or more IP addresses
  CNAME maps a name to another name (used when there are no other records on that name)
=== Route53 ===
* DNS web service, an AWS offering
* Connects user requests to infra runing in AWS (EC2, ALB, S3 buckets)
* Can also purchase and manage domain names in Route53
* Q: how do you manage DNS server outside of AWS? Do you need your own DNS server?
* Q: how do Route53 health checks work? Does it hit a healthcheck endpoint that you specify?
=== What happens when you type in google.com ===
* protocol    : http (https)
  resource '/': retrieve main (index) page
* HSTS list (list of websites that request to be contacted via HTTPS only)
  If not in HSTS but only contactable through HTTPS, first HTTP request will return a response requesting only HTTPS
* DNS lookup
* After it gets IP address, takes that plus port number from url (http 80, https 443) and requests a TCP socket stream
  Transport layer => TCP segment, destination port + source port
  Network layer => additional IP address of destination server + current machine
  Link layer => MAC address of machine + gateway
=== TSL Handshake ===
* Client sends a hello message with TLS version, list of cipher algorithms and compression methods available
  - Q: how is this list generated
* Server replies with a hello with its TLS version, selected cipher & compression, and public certificate (signed by CA). The cert has a public key used by the client to encrypt the rest of the handshake until a key is agreed upon
* Client verifies cert against list of trusted CAs. If trusted, generate string of pseudorandom bytes (pre master key) and encrypt with public key. Client also makes its own symmetric master key with the PMK.
* Server decrypts random bytes w private key and uses these bytes to make its symmetric master key.
* Client sends finished message, encrypts hash of transmission w/ symmetric key.
* Server generates its own hash, decrypts client hash to verify match, and then sends finished message.
* TLS sends app data encryped with agreed symmetric key.
=== Another analogy for TSL handshake ===
* Jason sends a courier to company's address (request to IP)
* Company has envelopes that when closed *can only be opened by the company*. Company and courier go together to a trusted third party that makes the company provide documentation to prove its identity. The notary certifies the company's identity and its secure envelopes and takes these envelopes back to Jason (signing request generates public key, private key is envelope)
* Jason gets the envelopes, trust the notary (CA), so can trust the envelopes (cert)
* Jason has secure envelopes that once sealed only Jason can open. Puts these in the company's secure envelopes and sends them back to the company (string of pseudorandom bytes, encrypted with server public key)

== THIS PART IS FUZZY ==
* Company gets the sealed secure envelope, opens it (as only it can, because it has the private key), and has Jason's secure envelopes (pseudorandom bytes)
* Company has another kind of envelope that can only be opened and sealed by using a special combination (random bytes to make symmetric master key). The company puts this special combination envelope with the combination into one of Jason's envelopes (encrypt with random bytes)
* Company has a type of secure envelope that anyone can open, but only the company can seal (encrypt with private key, decrypt with public key). Sends the whole thing to Jason
* Jason can open it (with public key), knows it comes from the company, opens the envelope only Jason can open, and then finds combination envelope and combination. (*DON'T THINK THIS IS TRUE*)
* Puts data into combination envelope, seals it with the combination, sends it to the company

=== SSL Certs ===
* SSL cert is a set of files to provide asymmetric encryption
* Signing request (.csr), used by 3rd party to generate public key
  Private key (.key), installed on the server and kept secret and secure
  Public key (.crt), installed on the server but given freely to any connecting device
  Intermediate certs, files provided by 3rd party that signed your public key
* Need a dedicated IP for your SSL cert because establishing the secured communication channel comes first. Computer needs to connect to the IP of the server to encrypt, so server has to give the same cert for every connection
  - Connects to your dedicated IP, given your SSL cert (public key), web browser will complain if cert received doesn't match doman name it is trying to connect to (IPs)

=== REST ===
* REST = REpresentational State Transfer
* RESTful web services allows requesting systems to access and manipulate web resources w/ a uniform & predefined set of ops
* REST can be used over nearly any protocol, but usually uses HTTP
* protocol: way for two things to communicate
* REST constraints:
  * Client/Server separate
  * Stateless (calls can be made independently, and each call contains all the data necessary to complete the call)
  * Cacheable data
  * Uniform interface (e.g. HTTP w/ URI resources, CRUD operations)
  * Layered system between client & end server
* How does REST interact with HTTP?
* What is the difference between REST and SOAP?
  * REST faster, more efficient, can return/use other formats
  * degree of coupling between client/server implementations
  * REST client = generic client that uses a protocol and standardized methods
  * REST needs hypermedia and HATEOAS => client only knows the entry point URI, resources provide links the client should follow
* REST: uri tied to specific objects, stateless & cacheable calls to specific objects in data model

=== HTTP ===
* set of rules for transfering files. method for encoding and transporting info b/w a client and a web server
* transfer hypertext (files that can contain references to other files)
* stateless protocol
* request response paradigm: client makes a request, server issues a response w/ requested content + status info about the request
* standard set of headers, headers mean very specific specified things

=== Internet Protocol Suite (TCP/IP) ===
==== Application Layer ====
* protocols used by most apps for providing user services or exchanging app data over network connections established by lower level protocols
* HTTP, FTP, SMTP, etc.
==== Transport Layer ====
* performs host to host communications
===== UDP =====
* thin protocol built on top of IP
* basic unit of data is user datagram
* change is end to end protocol: contains enough information to transfer a user datagram from one process on a transmitting host to another process on a receiving host
===== TCP =====
* full duplex reliable connection oriented service
* stream oriented service: transfer large amount of data in a reliable way
* basic unit of data is TCP segment
* TCP assigns sequence number to each transferred byte, requires an ACK, or else resends
* uses sequence number to order segments upon reception
* TCP connection uses 3 way handshake to start
* Flow control & congestion control
==== Internet Layer ====
* exchanges datagrams across network boundaries
* uniform network interface that hides layout of underlying network connections
===== IP =====
* Internet protocol is the first layer of virtual network abstraction
* unreliable, connectionless delivery system
* unreliable because protocol provides no functionality for recovering bad datagrams
* basic unit of data exchange is the internet datagram
==== Link Layer ====
* defines networking methods within the scope of the local network link

=== OSI ===
* 7 layers: physical, data link, network, transport, session, presentation, application
* bit, frame, packet, transport, data (session, presentation, application)
==== Physical ====
* 1's and 0's between two nodes
* concerned with how to parse bits (how to send 1's and 0's)
==== Data Link ====
* puts 1's and 0's on wire, pulls 1's and 0's from wires.
* groups them into chunks called frames
* who sent what (where to send 1's and 0's for physical data links)
==== Network ====
* packet delivery from end to end
* end to end versus hop to hop for data link
* where to send 1's and 0's to virtual networks (packets)
==== Transport ====
* distinguishing network streams with port numbers (an addressing scheme)
* a unique application stream is identified by source + destination port.
* service to service delivery
* how to persist/maintain a connection b/w two virtual networks and send/receive a stream of packets
==== Session/Presentation/Application ====
* final steps before data transferred through network is displayed to the end user
* session: controls the dialogue between computers
* presentation: context between application layer entities
* application: interacts w software apps that implement a communicating component

=== Consistency Models in Databases ===
* Consistency is the requirement that any given DB transaction changes affected data only in allowed ways
  * data written to DB must be valid according to all the defined rules (constraints, cascades, triggers, etc.)
  * C in ACID
* Multiple definitions besides this one:
  Any transaction started in the future sees the effects of all other transactions in the past
  Operations in transactions are performed accurately, correctly, and with validity
* Also part of CAP theorem, but different. Atomic consistency vs DB consistency: atomic consistency is the property of a single request/response operation sequence; DB is about transations
  * CAP is cluster wide, ACID is node specific
- Between CAP, always choose P, need to pick between A and C
  - Choose C or A in differing degrees
* Enforced consistency vs eventual consistency
  * Eventual: Storage system guarantees that if no new updates made, eventually all accesses will return the last updated values
* BASE (Basically Available Soft-state Eventually) is eventual consistency, contrasts with RDBMS ACID transactions
  * in the same vein as ACID
  * Transactions will slowly propagate
* Serializable consistency: same operations are applied in the same order to every copy of data item
* Linearizable: same as serializable + order reflects the order in which operations appear to execute to an external observer
* Sequential consistency: operations can take place before invocation or after completion, but operations from any given process need to maintain that order
* Weak consistency models allow for more histories
* https://aphyr.com/posts/313-strong-consistency-models

=== Types of Databases ===
==== Relational Databases ====
* Pros
  * Relational databases work with structured data.
  * They support ACID transactional consistency and support “joins.”
  * They come with built-in data integrity and a large eco-system.
  * Relationships in this system have constraints.
  * There is limitless indexing.
* Cons
  * Relational Databases do not scale out horizontally very well (concurrency and data size), only vertically, (unless you use sharding).
  * Data is normalized, meaning lots of joins, which affects speed.
  * They have problems working with semi-structured data.
- relational DBs require strict structure
- easy to index and join and do fancy queries
- if you just care about having rules w/o a lot of consistency, then you can use postgres for one master node with rules that eventually propagate
==== NOSQL ====
* Pros
  * They scale out horizontally and work with unstructured and semi-structured data. Some support ACID transactional consistency.
  * High availability.
* Cons
  * Weaker or eventual consistency (BASE) instead of ACID.
  * Limited support for joins.
  * Data is denormalized, requiring mass updates (i.e. product name change).
  * Does not have built-in data integrity (must do in code).
  * Limited indexing.
* Q: does postgres support strong consistency?
- document stores; stored files
- "directory" your db; directory has a name, new files has an id in the directory
- easy to put stuff in, no validation or search, so it is more horizontally scalable (no consistency for rules, no validation, etc.)
- can store metafiles for uniqueness checks
==== Liveness and Safety ====
- In all distributed systems these are the two properties
- Liveness corresponds to availability (eventually I'll be accessible)
- Safety corresponds to consistency (rules/data consistency)
==== Graph DB ====
- Different conversation than SQL versus NOSQL (A lot about scalability)
- Think of graph DBs as another type of DB, has its own liveness and scalability
- but different b/c data is stored in a graph queryable way
==== Different types of distributed systems ====
- Look up master/slave replicas, master/master replicas, consensus
- relation use master/slave, document use master/master, graph/relational moving towards consensus

=== DB Sessions/Transaction and DB Drivers & DB connections ===
* DB transaction is a unit of work performed within a DBMS against a DB
* Transactions have 4 properties (ACID)
* Transactions must happen in isolation, so they do not know about each other until they are committed
* Session is a connection b/w an application and the RDBMS (semi permanent interactive information exchange)
  * Q: session is multiple transactions? what is the point of a session
==== Isolation Levels ====
- I in ACID
- There are different models for isolation
- https://technet.microsoft.com/en-us/library/ms189122(v=sql.105).aspx
- almost every relational db by default is nonrepeatable read
==== Database Drivers ====
* DB server has its own version of client/server protocol
* Use DB driver to implement the protocol and exposes an API you use to interact with the DB
* ODBC and JDBC standards to standardize APIs so applications don't need to change when they change DBs
==== DB Connections ====
* Connection is how db server and client software communicate
* Uses the connection to send and receive info
* Connections built with a connection string for instance & user auth
* Q: is one connection a session? are connections open until closed? is it like a stream?

=== Isolation Levels ===
* isolation levels control
  * whether locks are taken when data is read, and what types of locks are requested
  * how long read locks are held
  * Whether a read operation referencing rows modified by another transaction:
    * Blocks until the exclusive lock on the row is freed.
    * Retrieves the committed version of the row that existed at the time the statement or transaction started.
    * Reads the uncommitted data modification.
* Dirty read: can read data from a row modified by another running transaction not yet committed
* Non repeatable reads: Data read twice in same transaction cannot be guaranteed to contain the same value
* Phantom reads: two queries run, different collection of rows returned* Phantom reads: two queries run, different collection of rows returned* Phantom reads: two queries run, different collection of rows returned* Phantom reads: two queries run, different collection of rows returned* Phantom reads: two queries run, different collection of rows returned* Phantom reads: two queries run, different collection of rows returned* Phantom reads: two queries run, different collection of rows returned
|                  | dirty reads | non repeatable reads | phantom |
|------------------|-------------|----------------------|---------|
| Read uncommitted | Yes         | Yes                  | Yes     |
| Read committed   | No          | Yes                  | Yes     |
| Repeatable read  | No          | No                   | Yes     |
| Serializable     | No          | No                   | No      |
* Repeatable read is the usual default

=== Reverse Proxies ===
* proxy server is a intermediary server that forwards requests for content from multiple clients to multiple servers
* Reverse proxy server sits behind the firewall in a private network and directs client requests to the appropriate backend server
* Uses: load balancing, web acceleration (can do SSL, cache, etc.) and security/anonymity (protects identity of backend servers and access from a single record locator/url)
* Reverse proxy versus ALB versus forward proxy?
* Reverse vs forward proxy is about identity hiding
  * forward proxy hides identity of client -> server, reverse proxy hides identity of server to client

=== Authorization & Authentication ===
* Authentication is the process of verifying who you are. When you log on to a PC with a user name and password you are authenticating.
  Authentication is about who somebody is.
  SSL, TLS
* Authorization is the process of verifying that you have access to something. Gaining access to a resource (e.g. directory on a hard disk) because the permissions configured on it allow you access is authorization.
  Authorization is about what they're allowed to do.
  role-based, rule-based, etc.
==== OneLogin ====
* user signs into OneLogin, handles your authentication
* passes token or sends encrypted user auth data for form based auth (fill in user & pass)
* hit OneLogin through HTTPS, handles all of your stuff for you
* users synced to OneLogin from a user directory like AD
==== OAuth ====
* notifying resource provider that the resource owner grants permission to a 3rd party to access their information
* OAuth allows for
  * different access levels
  * access granularity
  * manage access from the resource provider
* useful & common for social media integrating w 3rd party apps
==== OIDC ====
* identity layer built on top of OAuth2
* allows clients to verify identity of the end user based on the authentication performed by an authorization server, and give basic profile information about the end user (JWT?)
* basically secure way to contact id service, get some user details, and return securely back to app
* OIDC lets clients request/receive data about authenticated sessions and end-users
==== Access Control Models ====
* Attribute based access control (ABAC)
  access rights granted to users through policies that evaluate attributes (user attributes, resource attributes, env conditions)
* discretionary (DAC)
  data owner decides
  whitelist/blacklist model
* History based (HBAC)
  based on history of the user (behavior, time b/w requests, content, etc.)
* identity based (IBAC)
  ???
* mandatory (MBAC)
  users cannot determine who has access, based on clearance levels and classification of data
* Organization based (OrBAC)
  policy designer defines a security policy independent of implementation (?)
* Role based (RBAC)
  based on title/role
  superset of mandatory, abstraction (aggregation of discretionary)
* Rule based (RAC)
  context based, business rules (how is this not everything else...?)
  don't need arbitrary permission roles
* Responsibility based
  responsibilities given (how is this different from attribute)
==== Rule vs Role based Auth ====
* Role based about who you are
* Rule based about every other condition (is that true...?)

== Queues and Migrating DBs ==
=== SQS and SNS ===
* Amazon offerings
* SNS is a pub/sub system, messages are pushed to subscribers
* SQS is a distributed queueing system. Receivers poll from SQS to receive messages.
  Messages can't be received by mulitple receivers at the same time
  Any receiver can receive/process/delete a message
  Polling will always introduce some latency
* Use SNS to distribute several copies of messages to receivers. Send time-critical messages
* Use SQS to hold messages, decouple applications (or integrate) so you can keep messages in SQS for a while. Decouple sending & receiving components
* Publish to SNS topic, subscribe to SNS topic
* Produce to SQS queue, consume from SQS queue
=== RabbitMQ ===
* Also a message queue
* Differences: RabbitMQ supports blocking, so you can have the client sit and wait for a message to be available w/o needing to poll
  For SQS you have to poll and wait for timeout before disconnecting
* Selectively consume messages based on topics
* SQS is per message price :o
* SQS uses visibility timeouts (once set time has passed after messag is consumed, it requeues unless its deleted), so for longer time to process messages they need to reset the visibility timeout
* RabbitMQ has ack and noack. noack => acked as soon as consumed. ack => client must acknowledge or else it'll requeue automatically
* Both guarantee at least once delivery, so functions that process the messages need to be idempotent
=== Exchange Types ===
* Fanout: pushes all messages it receives to all queues bound to it
* Topic: pub/sub to topics
* Direct: bind a routing key to one or more queues, based on key in message, publish to a specific queue
=== Redis ===
* In memory data store
* Also consumer/subscription?
=== Kafka ===
== Migrating Databases ==
* Why is doing database migrations on app startup bad?
  * couples two things that shouldn't be coupled (4 apps at once that need to apply migrations?)
  * need to restart app when adding new migrations
* Writing DB migrations: every change you make must be backwards compatible with the rest of the system
* How do you manage your migrations?
* Flyway allows you to recreate a DB from scratch, make it clear what state a DB is in, migrate in a deterministic way from current version of DB to next
* Store changes to the Database in version control
* All DB changes are migrations
* Flyway looks for schema history table (flyway_schema_history)
  Scan filesystem/classpath for migrations folder
  Sort them by versions
  Apply and update schema history table
* Two categories of migrations: creating tables/views (adding), and modifying data
  data definition (changing schema) and then changing data
  schema migration vs data migrations
* ORMs also an option to manage migrations, but mixes domains and also forces you to not write in sql

== Security Networks ==
* VPC is an AWS offering that lets you launch AWS resources in a virtual network you control
* Resembles a traditional network that you would operate in your own data center
* Logically isolated from other virtual networks
* Launch your own resources, and can configure your VPC by modifying IP address range, create subnets, configure route tables, network gateways, security settings
* Subnet = a range of IP addresses in your VPC
* Have to specify a cidr block for your VPC
* Subnet = cidr block subset of cidr block for vpc
* The internet is a collection of networks
* CIDR = new flexible way to express network addresses
* Network security is about preventing misuse through unauthorized access. About managing access, stopping threats from spreading
* Stuff like VPN (encrypts endpoint to network), network segmentation, firewalls (barriers b/w internal network and untrusted external networks)
=== Questions for next time ===
* Draw out VPC, subnet within VPC, how does it work w AZ and region
* What else is there after subnet? EC2? Route53? S3? is S3 inside your VPC
* What happens if your IPs collide?
* Why CIDR block, not full range
* How to get your VPC to talk to other networks
* What is ipv4, ipv6
* Restrictions to connect
== AWS Offerings ==
=== SNS SQS ===
* SNS is a pub/sub system, messages are pushed to subscribers
* SQS is a distributed queueing system. Receivers poll from SQS to receive messages.
  Messages can't be received by mulitple receivers at the same time
  Any receiver can receive/process/delete a message
  Polling will always introduce some latency
=== Artifactory ===
* JFrog :p
* Binary repository manager
* Stores outcomes of your build process
* Stores individual app components that can be assembled to the full product
* Binary repo hosts mult. package managers
=== Route53 ===
* Register domain names
* Route internet traffic to the resources for your domain
* Checks health of your resources
* https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html
=== S3 ===
* Simple storage service = store and retrieve any amount of data
* Stores data as objects in buckets. An object = file + optional metadata
* Can control access, view access logs, choose geographical region to store
* Eventually consistent, 99.999999999% durability (S3 will never lose your data, almost always have access to your data)
* S3 bucket names are globally namespaced, public service
* S3 can be sharded worldwide
=== ECR ===
* Managed AWS docker registry service
* private docker repos, connects with ECS
* Push to an ECR registry
=== ECS ===
* Container management service, run start stop containers
* Runs on EC2 instances... on an EC2 cluster
* Q: does it have to run on EC2 instances?
* Don't have to worry about scaling, cluster management, and configuration management
